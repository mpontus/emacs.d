# -*- org-adapt-indentation: nil; org-edit-src-content-indentation: 0; org-src-preserve-indentation: t; -*-
#+TITLE: Emacs Init File
#+STARTUP: showall
#+PROPERTY: header-args :tangle no :noweb yes :noweb-ref runtime-configuration :results silent

* Install

This config is bootstrapped by evaluating the source block below (<kbd>C-c C-c</kbd>).

The file must be saved in `user-emacs-directory` (=~/.emacs.d= by default).

Make sure the properties at the top of the file are initialized before evaluating the block.

#+BEGIN_SRC emacs-lisp :tangle yes :noweb-ref none
;; This is the only source block in the file that gets tangled. All
;; other source blocks will be embedded in the codition below using
;; noweb references.
;; 
;; Special properties at the top of this file assigns default
;; reference name to every block and excludes them from tangling. This
;; block overrides this configuraiton using header props.
;;
;; The condition below evaluates the content of all other blocks when
;; init.el is newer than init.el, otherwise it reinitializes init.el
;; from init.org and evaulates it after init.el gets updated.
(if (file-newer-than-file-p (expand-file-name "init.org" user-emacs-directory)
			    (expand-file-name "init.el" user-emacs-directory))
    (progn
      (org-babel-load-file (expand-file-name "init.org" user-emacs-directory))
      ;; Byte compile the file separately so that the macros will be
      ;; set up by the time byte-compilation happens
      (byte-compile-file (expand-file-name "init.el" user-emacs-directory)))
  <<runtime-configuration>>)
#+END_SRC

* General

Basic configuration applicable everywhere.

** Package Manager

Emacs package manager setup.

*** Package.el

Use package.el to install stable-ish pacakges.

#+BEGIN_SRC emacs-lisp
(require 'package)

(setq package-archives
      '(("org" . "https://orgmode.org/elpa/")
	("melpa" . "https://melpa.org/packages/")
	("gnu" . "http://elpa.gnu.org/packages/")))

(ignore-errors 
  (package-initialize)
  (package-refresh-contents))
#+END_SRC

*** Use Package

Install use-package to support declarative configuraiton.

#+BEGIN_SRC emacs-lisp
(package-install 'use-package)
#+END_SRC

Initialize `bind-key` because some packages will complain about `personal-keybindings` being undefined.

#+BEGIN_SRC emacs-lisp
(use-package bind-key
  :ensure t)
#+END_SRC

*** Quelpa

Quelpa helps install packages which have yet to be published to melpa.

I use it to install my own packages.

#+BEGIN_SRC emacs-lisp
(package-install 'quelpa)

(quelpa-self-upgrade)
#+END_SRC

Install quelpa adapter for use-package:

#+BEGIN_SRC emacs-lisp
(package-install 'quelpa-use-package)
#+END_SRC

** Better defaults

Adjust some minor annoyances in default emacs configuration.

#+BEGIN_SRC emacs-lisp
;; Answer confirmation dialogs with a single key
(defalias 'yes-or-no-p 'y-or-n-p)

;; Better naming style for conflicting buffers
(setq uniquify-buffer-name-style 'reverse)

;; Enable persistent minibuffer history
(savehist-mode 1)

;; Save clipboard contents to kill ring instead of discarding them
(setq save-interprogram-paste-before-kill t)

;; Move backups and auto-save files to home directory to avoid cluttering work dir
(setq backup-directory-alist
      `((".*" . ,(expand-file-name "backups" user-emacs-directory))))
(setq auto-save-file-name-transforms
      `((".*" ,(expand-file-name "backups" user-emacs-directory) t)))

;; Replace selection when region is active during `yank'
(delete-selection-mode +1)

;; Disable ring bell on `keyboard-quit` (<C-g>)
(setq ring-bell-function 'ignore)

;; Disable electric-indent-mode by default
(electric-indent-mode -1)

;; Make find-file case-insensitive
(setq read-file-name-completion-ignore-case t)

;; Increase history length
(setq history-length 8000)
#+END_SRC

Backspace key is relatively difficult to access. For backward deletion I use <kbd>C-h</kbd> instead.

#+BEGIN_SRC emacs-lisp
;; In every situation where I want to use <backspace> I want to be able to use <C-h> instead.
(global-set-key (kbd "C-h") 'backward-delete-char)

;; I haven't been able to figure out how to translate these combinations
(global-set-key (kbd "M-h") 'backward-kill-word)
(global-set-key (kbd "C-M-h") 'backward-kill-sexp)
#+END_SRC

Add ~initials~ to default completion styles.

Enabling this will complete "tdoe" to "toggle-debug-on-error".

#+BEGIN_SRC emacs-lisp
(add-to-list 'completion-styles 'initials 'append)
#+END_SRC

Debugger must open in the same frame.

#+BEGIN_SRC emacs-lisp
(add-to-list 'display-buffer-alist
	     '("`\\*Debugger\\*$" display-buffer-same-window))
#+END_SRC

** Global find file history

Find-file is my primary means for navigating between files, although not the only one.

Because of this, not every file ends up in file-find-history which I'm used to rely on for opening previously accessed files.

Following package adds every opened file, whichever method was used to open it, into ~file-name-history~ used by find-file.

#+BEGIN_SRC emacs-lisp
(quelpa '(find-file-global-history
	  :repo "mpontus/find-file-global-history.el"
	  :fetcher github))

(find-file-global-history-mode 1)
#+END_SRC

** Yank entire buffer

I often need to copy contents of the entire buffer somewhere else. This shortcut helps with that.

#+BEGIN_SRC emacs-lisp
(defun yank-entire-buffer ()
    (interactive)
  (kill-ring-save (point-min) (point-max)))

(global-set-key (kbd "C-c M-w") 'yank-entire-buffer)
#+END_SRC

** Exec Path From Shell

Emacs must infer $PATH from the shell configuration.

#+BEGIN_SRC emacs-lisp
(package-install 'exec-path-from-shell)

(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
#+END_SRC

** Display

Change default emacs appearance

#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(scroll-bar-mode -1)

;; Hide menu-bar unless on Mac OS X where it doesn't take away any real estate
(unless (eq window-system 'mac)
  (menu-bar-mode -1))

(set-frame-font "Hack-12" 'keep-size t)

;; Leuven is a light theme with supporting many modes
(load-theme 'leuven 'no-confirm)

;; Start emacs in fullscreen
(setq initial-frame-alist '((fullscreen . maximized)))
#+end_src

Highlight current line:

#+BEGIN_SRC emacs-lisp
;; Not using global-hl-line-mode because it would could not be
;; disabled on per-mode basis
(add-hook 'text-mode-hook 'hl-line-mode)
(add-hook 'prog-mode-hook 'hl-line-mode)
#+END_SRC

Show line numbers in programming modes:

#+BEGIN_SRC emacs-lisp
(defun setup-line-numbers ()
  ;; Use native line-numbers available in Emacs 26+
  (setq-local display-line-numbers t)
  ;; Disable line wrap when line numbers are shown
  (setq-local truncate-lines t))

(add-hook 'prog-mode-hook 'setup-line-numbers)
#+END_SRC

** Window Management

Switch between windows with M-<n>:

#+BEGIN_SRC emacs-lisp
(quelpa '(window-number :fetcher github :repo "mpontus/window-number.el"))

(window-number-mode)
#+END_SRC

Winner mode provides undo history for window configuration.

#+BEGIN_SRC emacs-lisp
(winner-mode 1)

(global-set-key (kbd "C-x w C-/") 'winner-undo)
(global-set-key (kbd "C-x w C-?") 'winner-redo)
#+END_SRC

** Shell

Shell-pop allows opening a shell in the current directory:

#+BEGIN_SRC emacs-lisp
(package-install 'shell-pop)

(global-set-key (kbd "C-'") 'shell-pop)
#+END_SRC

** Undo Tree

The main point of emacs undo implementation is that it preserves all history even if you go back a couple of steps and introduce new changes.

This feature can help if something goes wrong, but otherwise complicates unnecessarily undo-redo workflow by making it non-linear.

Undo tree's approach keeps the basic workflow simple, while saving all of the undo information which can be accessed when necessary (<kbd>C-x u</kbd>).

#+BEGIN_SRC emacs-lisp
(package-install 'undo-tree)
(global-undo-tree-mode 1)

(global-set-key (kbd "C-/") 'undo-tree-undo)
(global-set-key (kbd "C-?") 'undo-tree-redo)
(global-set-key (kbd "C-x u") 'undo-tree-visualize)

;; Save undo history between sessions
(setq-default undo-tree-auto-save-history t)
(setq-default undo-tree-history-directory-alist
              '(("." . "~/.emacs.d/undo-tree/")))

;; I had this set at some point. I don't remember why.
;; (setcdr undo-tree-map nil)
#+END_SRC

** Multiple Cursors

Multiple cursors is like macro which allows you to observe and adjust results during recording.

Entry point is <kbd>C-c m</kbd>

#+BEGIN_SRC emacs-lisp
(package-install 'multiple-cursors)

(global-set-key (kbd "C->") 'mc/mark-more-like-this-extended)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-M->") 'mc/mark-all-like-this)
(global-set-key (kbd "C-c m") 'multiple-cursors-hydra/body)
#+END_SRC

** Subword Mode

=subword-mode= enables emacs to treat each part of camel-cased experession as a separate word.

#+BEGIN_SRC emacs-lisp
(global-subword-mode 1)
#+END_SRC

** Editorconfig

Add support for .editorconfig files to infer per-project code style settings.

#+BEGIN_SRC emacs-lisp
(package-install 'editorconfig)

(editorconfig-mode 1)
#+END_SRC

** File Management

Dired+ enhances ~dired~ functionality with some useful commands.

Namely, I use it to perform search-and-replace on filenames thanks to ~diredp-insert-subdirs-recursive~.

#+BEGIN_SRC emacs-lisp
(quelpa '(dired+ :fetcher github :repo "emacsmirror/dired-plus"))
#+END_SRC

Disable dired confirmation about recursively copying directories:

#+BEGIN_SRC emacs-lisp
(setq-default dired-recursive-copies 'always)
#+END_SRC

* Org Mode

Install latest org mode from org repo.

#+BEGIN_SRC emacs-lisp
(package-install 'org)
#+END_SRC

Enable wrapping of lines.

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'org
  (add-hook 'org-mode-hook 'visual-line-mode))
#+END_SRC

Custom keybindings.

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'org
  ;; Add aligned tag with C-c C-g
  (define-key org-mode-map (kbd "C-c C-g") 'org-set-tags)
  ;; Move subheadings/list-items up and down with M-p/M-n
  (define-key org-mode-map (kbd "M-p") 'org-metaup)
  (define-key org-mode-map (kbd "M-n") 'org-metadown))
#+END_SRC

Indentation with tabs breaks tags alignment.

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
          (defun setup-org-mode-indentation ()
            (setq indent-tabs-mode nil)))
#+END_SRC

* Diary

Trying out jounraling.

#+BEGIN_SRC emacs-lisp
(add-hook 'diary-mode-hook 'visual-line-mode)
(add-hook 'diary-mode-hook 'visual-fill-column-mode)
#+END_SRC

* Version Control

Configuration for Version Control tools.

** Magit

Magit is a Git interface for emacs. It helps tremendously with partial commits, rebase and history browsing.

#+BEGIN_SRC emacs-lisp
(package-install 'magit)

(global-set-key (kbd "C-x g g") 'magit-status)
#+END_SRC

** Git Timemachine

Git timemachine allows you to quickly review the history of a signle file

#+BEGIN_SRC emacs-lisp
(package-install 'git-timemachine)

(global-set-key (kbd "C-x g t") 'git-timemachine)
#+END_SRC

** Git Gutter

#+BEGIN_SRC emacs-lisp
(package-install 'git-gutter)

(global-git-gutter-mode 1)
#+END_SRC

** Ediff

Ediff starts in the new frame by defualt. This change makes ediff reuse existing frame and restore window layout on exit.

#+BEGIN_SRC emacs-lisp
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+END_SRC
* Projects

Use projectile to traverse the files between projects.

#+BEGIN_SRC emacs-lisp
(package-install 'projectile)

;; Remove projectile shortcut which violates userspace key binding guidelines
(with-eval-after-load "projectile"
  (define-key projectile-mode-map (kbd "C-c p") nil))

;; By my own convention, globally accessible key-bindings live under C-x prefix.
(global-set-key (kbd "C-x p") 'projectile-command-map)

;; Enable
(projectile-mode 1)
#+END_SRC

Install =ag= to enable some of Projectile's functionality.

#+BEGIN_SRC emacs-lisp
(package-install 'ag)
#+END_SRC

Install treemacs to navigate between project files:

#+BEGIN_SRC emacs-lisp
(package-install 'treemacs)

(global-set-key (kbd "C-c t") 'treemacs)
#+END_SRC

* Emacs Lisp

** Paredit

Paredit helps keeps parentheses ballanced and provides a few useful commands for working with lisp code.

#+BEGIN_SRC emacs-lisp
(package-install 'paredit)

(add-hook 'emacs-lisp-mode-hook 'paredit-mode)
#+END_SRC

Use paredit in eval-expression mode

#+BEGIN_SRC emacs-lisp
(add-hook 'eval-expression-minibuffer-setup-hook 'paredit-mode)
#+END_SRC

** Flycheck

Enable flycheck in emacs lisp buffers for package authoring.

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'flycheck-mode)

(define-key emacs-lisp-mode-map (kbd "M-n") 'next-error)
(define-key emacs-lisp-mode-map (kbd "M-p") 'previous-error)
#+END_SRC

* Javascript

Set up tools for working with JavaScript code.

** JS Mode

I use simple JS mode for now beacuse it's easier to get into when something goes wrong.

#+BEGIN_SRC emacs-lisp
(with-eval-after-load "js"
  (setq-default js-indent-level 2))
#+END_SRC

Enable automatic pairing and alignment of parentheses and braces:

#+BEGIN_SRC emacs-lisp
(add-hook 'js-mode-hook 'electric-pair-local-mode)
(add-hook 'js-mode-hook 'electric-indent-local-mode)
#+END_SRC

** Custom keybindings

I often need to sort lines in alphabetical order when working with Javascript.

#+BEGIN_SRC emacs-lisp
(with-eval-after-load "js"
  (define-key js-mode-map (kbd "C-c s") 'sort-lines))
#+END_SRC

** Formatting

Prettier-emacs automatically formats code on save.

#+BEGIN_SRC emacs-lisp
(package-install 'prettier-js)

(add-hook 'js-mode-hook 'prettier-js-mode)
#+END_SRC

Look up prettier executable in node_modules

#+BEGIN_SRC emacs-lisp
(package-install 'add-node-modules-path)

(add-hook 'prettier-js-mode-hook 'add-node-modules-path)
#+END_SRC

** Linter

Flycheck will use static analysis tools and highlight errors in the buffer.

#+BEGIN_SRC emacs-lisp
(package-install 'flycheck)

(add-hook 'js-mode-hook
	  (lambda ()
	    (flycheck-mode 1)
	    ;; Unless explicitly told flycheck can choose other
	    ;; checker which will mess up the chain setup below
	    (setq-local flycheck-checker 'javascript-eslint)))

(with-eval-after-load "js"
  (define-key js-mode-map (kbd "M-p") 'flycheck-previous-error)
  (define-key js-mode-map (kbd "M-n") 'flycheck-next-error))
#+END_SRC

** FlowType Support

Enable Flow checker for flycheck

#+BEGIN_SRC emacs-lisp
(package-install 'flycheck-flow)

(with-eval-after-load "flycheck"
  (require 'flycheck-flow)
  (flycheck-add-next-checker 'javascript-eslint 'javascript-flow))

;; Skip non-annotated files
(with-eval-after-load "flycheck-flow"
  (setq flycheck-javascript-flow-args '("--respect-pragma")))
#+END_SRC

Add .js.flow to javascript extensions

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist
             '("\\.js.flow\\'" . js-mode))
#+END_SRC

Enable completion support for Flow files:

#+BEGIN_SRC emacs-lisp
(quelpa '(flow-completion-at-point :fetcher github :repo "mpontus/emacs-flow-completion-at-point"))

(add-hook 'js-mode-hook 'flow-completion-at-point-mode)
#+END_SRC

* Typescript 

Typescript is a language that compiles to javascript.

Typescript support in emacs is pretty solid thanks to [TypeScript Mode](https://github.com/ananthakumaran/typescript.el), which enables syntax highlighting and indentation, and [Typescript Interactive Development Environment](https://github.com/ananthakumaran/tide) which provides integration with typescript server.

** Basic Editing Support

Install typescript mode:

#+BEGIN_SRC emacs-lisp
(package-install 'typescript-mode)

;; Add .tsx to the list of extensions associated with typescript-mode
(add-to-list 'auto-mode-alist
             '("\\.tsx\\'" . typescript-mode))
#+END_SRC

Change default indentation level:

#+BEGIN_SRC emacs-lisp
(setq-default typescript-indent-level 2)
#+END_SRC

Enable auto-pairing:

#+BEGIN_SRC emacs-lisp
(add-hook 'typescript-mode-hook 'electric-pair-local-mode)
(add-hook 'typescript-mode-hook 'electric-indent-local-mode)
#+END_SRC

Fix comment continuation with <kbd>M-j</kbd>

Pressing <kbd>M-j</kbd> while inside a multiline comment allows you to insert a line break into the comment block. I find that `c-indent-new-comment-line` does better job than `indent-new-comment-line` in `js-mode`.

#+BEGIN_SRC emacs-lisp
(with-eval-after-load "typescript-mode"
  (define-key typescript-mode-map (kbd "M-j") 'c-indent-new-comment-line))
#+END_SRC

** TypeScript Server integraiton

Setup TIDE:

#+BEGIN_SRC emacs-lisp
(package-install 'tide)

(with-eval-after-load "flycheck"
  (flycheck-def-config-file-var typescript-tslint-typecheck-tsconfig
      typescript-tslint "tsconfig.json"
    :safe #'stringp
    :package-version '(flycheck . "27"))

  (flycheck-define-checker typescript-tslint
    "TypeScript style checker using TSLint.

Note that this syntax checker is not used if
`flycheck-typescript-tslint-config' is nil or refers to a
non-existing file.

See URL `https://github.com/palantir/tslint'."
    :command ("tslint" "--format" "json"
              (config-file "--config" flycheck-typescript-tslint-config)
              (config-file "--project" typescript-tslint-typecheck-tsconfig)
              (option "--rules-dir" flycheck-typescript-tslint-rulesdir)
	      (eval flycheck-tslint-args)
              source-original)
    :error-parser flycheck-parse-tslint
    :modes (typescript-mode)))


;; Working setup taken directly from TIDE documentaiton
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  ;; (add-to-list 'flycheck-checkers 'typescript-tslint-typecheck)
  ;; (flycheck-add-next-checker 'typescript-tide 'typescript-tslint-typecheck)
  ;; (add-to-list 'flycheck-disabled-checkers 'typescript-tslint)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1))

;; Disable tide autoformat if prettier is available
(remove-hook 'before-save-hook 'tide-format-before-save)

(add-hook 'typescript-mode-hook 'setup-tide-mode)
#+END_SRC

Enable flycheck in typescript buffers:

#+BEGIN_SRC emacs-lisp
;; Set up flycheck keybindings
(with-eval-after-load "tide"
  (define-key tide-mode-map (kbd "M-p") 'flycheck-previous-error)
  (define-key tide-mode-map (kbd "M-n") 'flycheck-next-error))
#+END_SRC

** Formatting

Although TIDE provides formatting capabilities powered by typescript executables, they do not handle formatting as well as ~prettier~.

#+BEGIN_SRC emacs-lisp
(package-install 'prettier-js)

(add-hook 'typescript-mode-hook 'prettier-js-mode)
#+END_SRC

** Auto fix

Some tslint errors are annoying to fix manually.

#+BEGIN_SRC emacs-lisp
(defun tslint-fix-and-revert ()
  (interactive)
  (when (or (not (buffer-modified-p))
	    ;; Ask for confirmation when reverting modified buffer
	    (yes-or-no-p (format "Revert buffer from file %s? "
                                 (buffer-file-name))))
    (shell-command (concat "tslint --fix " (buffer-file-name)))
    (revert-buffer nil 'noconfirm)))

(with-eval-after-load "typescript-mode"
 (define-key typescript-mode-map (kbd "C-c C-r") 'tslint-fix-and-revert))
#+END_SRC

** Code Folding

#+BEGIN_SRC emacs-lisp
(add-hook 'typescript-mode-hook 'hs-minor-mode)

(with-eval-after-load "typescript-mode"
  (define-key typescript-mode-map (kbd "C-c C-f") 'hs-toggle-hiding))
#+END_SRC

** Compilation

Colorize tsc messages in ~compilation-mode~:

#+BEGIN_SRC emacs-lisp
(require 'ansi-color)
(defun colorize-compilation-buffer ()
  (ansi-color-apply-on-region compilation-filter-start (point-max)))
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
#+END_SRC

* CSS

Using web-mode for CSS files primarily because it supports comment-continuation with ~M-j~.

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist
             '("\\.css\\'" . web-mode))
#+END_SRC

Adjust base indentaiton level:

#+BEGIN_SRC emacs-lisp
(setq web-mode-css-indent-offset 2)
#+END_SRC

Disable ~hl-line-mode~ which conflicts with highlighted color literals.

#+BEGIN_SRC emacs-lisp
(defun disable-hl-line-mode ()
  (hl-line-mode -1))

(add-hook 'css-mode-hook 'disable-hl-line-mode)
#+END_SRC

* Python

Enable electric-pair-mode to surround seleciton with parentheses:

#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook 'electric-pair-local-mode)
#+END_SRC

* Markdown

Install markdown mode for syntax highlighting.

#+BEGIN_SRC emacs-lisp
(package-install 'markdown-mode)
#+END_SRC

Enable visual-fill-column and visual-line modes for markdown files.

Visual-fill-colums ensures long lines are broken up at regular intervals to make text more readable.

Unlike auto-fill-mode it does not alter file contents.

Visual-line-mode ensures lines get broken at word boundaries.

#+BEGIN_SRC emacs-lisp
(package-install 'visual-fill-column)

(with-eval-after-load 'markdown-mode
  (add-hook 'markdown-mode-hook 'visual-fill-column-mode)
  (add-hook 'markdown-mode-hook 'visual-line-mode))
#+END_SRC

Enable spell checking.

#+BEGIN_SRC emacs-lisp
(setq ispell-really-aspell nil
      ispell-really-hunspell t
      ispell-program-name "hunspell")

(setq ispell-local-dictionary-alist
 '((nil "[[:alpha:]]" "[^[:alpha:]]" "[0-9]" t ("-d" "en_US,ru_RU") nil utf-8)))

(add-hook 'markdown-mode-hook 'flyspell-mode)
#+END_SRC

* OCaml

Install tuareg-mode - a language support for ocaml.

#+BEGIN_SRC emacs-lisp
(use-package tuareg)
#+END_SRC

Install ocp-indent for better indentation.

#+BEGIN_SRC emacs-lisp
(use-package ocp-indent
  :if (executable-find "ocp-indent")
  :hook (tuareg-mode . ocp-setup-indent))
#+END_SRC

Install Merlin for language server integraiton:

#+BEGIN_SRC emacs-lisp
(use-package merlin
  :hook (tuareg-mode . merlin-mode)
  :config
  ;; Enable jump-to-definition functionality when merlin mode is active
  (defun install-merlin-xref-backend ()
    (add-hook 'xref-backend-functions 'merlin-xref-backend nil t))
  (add-hook 'merlin-mode-hook 'install-merlin-xref-backend))

;; Install merlin-eldoc for minibuffer tooltips
(use-package merlin-eldoc
  :hook (merlin-mode . merlin-eldoc-setup))
#+END_SRC

Enable autocompletion with company-mode:

#+BEGIN_SRC emacs-lisp
(use-package company
  :requires merlin
  :hook (tuareg-mode . company-mode))
#+END_SRC

Enable syntax checking with flycheck-ocaml:

#+BEGIN_SRC emacs-lisp
(use-package flycheck-ocaml
  :requires (flycheck merlin)
  :hook (tuareg-mode . flycheck-ocaml-setup))
#+END_SRC

Install Utop for REPL.

#+BEGIN_SRC emacs-lisp
(use-package utop
  :if (executable-find "opam")
  :hook (tuareg-mode . utop-minor-mode)
  :config
  (setq utop-command "opam config exec -- utop -emacs"))
#+END_SRC

* REST Client

Useful for testing REST api.

#+BEGIN_SRC emacs-lisp
(package-install 'restclient)

(defun configure-restclient ()
  (setq tab-width 2))

(with-eval-after-load "restclient"
  (add-hook 'restclient-mode-hook 'configure-restclient))
#+END_SRC

* Bolt

Bolt is a language for schema modeleing in firebase.

#+BEGIN_SRC emacs-lisp
(quelpa '(bolt-mode
	  :repo "mpontus/bolt-mode"
	  :fetcher github))
#+END_SRC


