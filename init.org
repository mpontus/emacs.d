# -*- org-adapt-indentation: nil; org-edit-src-content-indentation: 0; org-src-preserve-indentation: t; -*-
#+TITLE: Emacs Init File
#+STARTUP: showall
#+PROPERTY: tangle no
#+PROPERTY: noweb yes
#+PROPERTY: noweb-ref runtime-configuration
#+PROPERTY: results silent

* Install

This config is bootstrapped by evaluating the source block below (<kbd>C-c C-c</kbd>).

The file must be saved in `user-emacs-directory` (=~/.emacs.d= by default).

Make sure the properties at the top of the file are initialized before evaluating the block.

#+BEGIN_SRC emacs-lisp :tangle yes :noweb-ref none
;; This is the only source block in the file that gets tangled. All
;; other source blocks will be embedded in the codition below using
;; noweb references.
;; 
;; Special properties at the top of this file assigns default
;; reference name to every block and excludes them from tangling. This
;; block overrides this configuraiton using header props.
;;
;; The condition below evaluates the content of all other blocks when
;; init.el is newer than init.el, otherwise it reinitializes init.el
;; from init.org and evaulates it after init.el gets updated.
(if (file-newer-than-file-p (expand-file-name "init.org" user-emacs-directory)
			    (expand-file-name "init.el" user-emacs-directory))
    (org-babel-load-file (expand-file-name "init.org" user-emacs-directory) t)
  <<runtime-configuration>>)
#+END_SRC

* General

Basic configuration applicable everywhere.

** Better defaults

Adjust some minor annoyances in default emacs configuration.

#+BEGIN_SRC emacs-lisp
;; Answer confirmation dialogs with a single key
(defalias 'yes-or-no-p 'y-or-n-p)

;; Better naming style for conflicting buffers
(setq uniquify-buffer-name-style 'reverse)

;; Enable persistent minibuffer history
(savehist-mode 1)

;; Save clipboard contents to kill ring instead of discarding them
(setq save-interprogram-paste-before-kill t)

;; Move backups and auto-save files to home directory to avoid cluttering work dir
(setq backup-directory-alist
      `((".*" . ,(expand-file-name "backups" user-emacs-directory))))
(setq auto-save-file-name-transforms
      `((".*" ,(expand-file-name "backups" user-emacs-directory) t)))

;; Replace selection when region is active during `yank'
(delete-selection-mode +1)

;; Disable ring bell on `keyboard-quit` (<C-g>)
(setq ring-bell-function 'ignore)

;; Disable electric-indent-mode
(electric-indent-mode -1)

;; Make find-file case-insensitive
(setq read-file-name-completion-ignore-case t)
#+END_SRC

Backspace key is relatively difficult to access. For backward deletion I use <kbd>C-h</kbd> instead.

#+BEGIN_SRC emacs-lisp
;; In every situation where I want to use <backspace> I want to be able to use <C-h> instead.
(global-set-key (kbd "C-h") 'backward-delete-char)

;; I haven't been able to figure out how to translate these combinations
(global-set-key (kbd "M-h") 'backward-kill-word)
(global-set-key (kbd "C-M-h") 'backward-kill-sexp)
#+END_SRC

** Package Manager

Emacs package manager setup.

*** Package.el

Use package.el to install stable-ish pacakges.

#+BEGIN_SRC emacs-lisp
(require 'package)

(setq package-archives
      '(("org" . "https://orgmode.org/elpa/")
	("melpa" . "https://melpa.org/packages/")
	("gnu" . "http://elpa.gnu.org/packages/")))

(unless package-archive-contents
  (package-initialize)
  (package-refresh-contents))

(add-hook 'after-init-hook 'package-initialize)
#+END_SRC

** Display

Change default emacs appearance

#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(scroll-bar-mode -1)

;; Hide menu-bar unless on Mac OS X where it doesn't take away any real estate
(unless (eq window-system 'mac)
  (menu-bar-mode -1))

(set-frame-font "DejaVu Sans Mono-10" 'keep-size t)

;; Leuven is a light theme with supporting many modes
(load-theme 'leuven 'no-confirm)

;; Start emacs in fullscreen
(setq initial-frame-alist '((fullscreen . maximized)))
#+end_src

** Subword Mode

=subword-mode= enables emacs to treat each part of camel-cased experession as a separate word.

#+BEGIN_SRC emacs-lisp
(global-subword-mode 1)
#+END_SRC

** Exec Path From Shell

Emacs must infer $PATH from the shell configuration.

#+BEGIN_SRC emacs-lisp
(package-install 'exec-path-from-shell)

(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
#+END_SRC

** Undo Tree

The main point of emacs undo implementation is that it preserves all history even if you go back a couple of steps and introduce new changes.

This feature can help if something goes wrong, but otherwise complicates unnecessarily undo-redo workflow by making it non-linear.

Undo tree's approach keeps the basic workflow simple, while saving all of the undo information which can be accessed when necessary (<kbd>C-x u</kbd>).

#+BEGIN_SRC emacs-lisp
(package-install 'undo-tree)
(global-undo-tree-mode 1)

(global-set-key (kbd "C-/") 'undo-tree-undo)
(global-set-key (kbd "C-?") 'undo-tree-redo)
(global-set-key (kbd "C-x u") 'undo-tree-visualize)

;; Save undo history between sessions
(setq-default undo-tree-auto-save-history t)
(setq-default undo-tree-history-directory-alist
              '(("." . "~/.emacs.d/undo-tree/")))

;; I had this set at some point. I don't remember why.
;; (setcdr undo-tree-map nil)
#+END_SRC

** Multiple Cursors

Multiple cursors is like macro which allows you to observe and adjust results during recording.

Entry point is <kbd>C-c m</kbd>

#+BEGIN_SRC emacs-lisp
(package-install 'multiple-cursors)

(global-set-key (kbd "C->") 'mc/mark-more-like-this-extended)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-M->") 'mc/mark-all-like-this)
#+END_SRC

** Editorconfig

Add support for .editorconfig files to infer per-project code style settings.

#+BEGIN_SRC emacs-lisp
(package-install 'editorconfig)

(editorconfig-mode 1)
#+END_SRC

* Org Mode

Install latest org mode from org repo.

#+BEGIN_SRC emacs-lisp
(package-install 'org)
#+END_SRC

Bind M-p/M-n to move subtree up/down.

I prefer outline move commands because they skip over invisible subtrees which occur when using ~org-match-sparse-tree~.

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'org
  (define-key org-mode-map (kbd "M-p") 'outline-move-subtree-up)
  (define-key org-mode-map (kbd "M-n") 'outline-move-subtree-down))
#+END_SRC

* Version Control

Configuration for Version Control tools.

** Magit

Magit is a Git interface for emacs. It helps tremendously with partial commits, rebase and history browsing.

#+BEGIN_SRC emacs-lisp
(package-install 'magit)

(global-set-key (kbd "C-x g g") 'magit-status)
#+END_SRC

** Git Timemachine

Git timemachine allows you to quickly review the history of a signle file

#+BEGIN_SRC emacs-lisp
(package-install 'git-timemachine)

(global-set-key (kbd "C-x g t") 'git-timemachine)
#+END_SRC

** Git Gutter

#+BEGIN_SRC emacs-lisp
(package-install 'git-gutter)

(global-git-gutter-mode 1)
#+END_SRC

** Ediff

Ediff starts in the new frame by defualt. This change makes ediff reuse existing frame and restore window layout on exit.

#+BEGIN_SRC emacs-lisp
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+END_SRC
* Projects

Use projectile to traverse the files between projects.

#+BEGIN_SRC emacs-lisp
(package-install 'projectile)

;; Remove projectile shortcut which violates userspace key binding guidelines
(with-eval-after-load "projectile"
  (define-key projectile-mode-map (kbd "C-c p") nil))

;; By my own convention, globally accessible key-bindings live under C-x prefix.
(global-set-key (kbd "C-x p") 'projectile-command-map)

;; Enable
(projectile-mode 1)
#+END_SRC

Install =ag= to enable some of Projectile's functionality.

#+BEGIN_SRC emacs-lisp
(package-install 'ag)
#+END_SRC

* Emacs Lisp

Paredit helps keeps parentheses ballanced and provides a few useful commands for working with lisp code.

#+BEGIN_SRC emacs-lisp
(package-install 'paredit)

(add-hook 'emacs-lisp-mode-hook 'paredit-mode)
#+END_SRC

Use paredit in eval-expression mode

#+BEGIN_SRC emacs-lisp
(add-hook 'eval-expression-minibuffer-setup-hook 'paredit-mode)
#+END_SRC

* Markdown

Install markdown mode for syntax highlighting.

#+BEGIN_SRC emacs-lisp
(package-install 'markdown-mode)
#+END_SRC

Enable auto-fill-mode for markdown files.

#+BEGIN_SRC emacs-lisp
(package-install 'visual-fill-column)

(add-hook 'markdown-mode-hook 'visual-fill-column-mode)
#+END_SRC

* Javascript

Set up tools for working with JavaScript code.

** JS Mode

I use simple JS mode for now beacuse it's easier to get into when something goes wrong.

#+BEGIN_SRC emacs-lisp
(with-eval-after-load "js"
  (setq-default js-indent-level 2))
#+END_SRC

Enable automatic pairing of parentheses and braces:

#+BEGIN_SRC emacs-lisp
(add-hook 'js-mode-hook #'electric-pair-local-mode)
#+END_SRC

** Formatting

Prettier-emacs automatically formats code on save.

#+BEGIN_SRC emacs-lisp
(package-install 'prettier-js)

(add-hook 'js-mode-hook 'prettier-js-mode)
#+END_SRC

Look up prettier executable in node_modules

#+BEGIN_SRC emacs-lisp
(package-install 'add-node-modules-path)

(add-hook 'prettier-js-mode-hook 'add-node-modules-path)
#+END_SRC

** Linter

Flycheck will use static analysis tools and highlight errors in the buffer.

#+BEGIN_SRC emacs-lisp
(package-install 'flycheck)

(add-hook 'js-mode-hook
	  (lambda ()
	    (flycheck-mode 1)
	    ;; Unless explicitly told flycheck can choose other
	    ;; checker which will mess up the chain setup below
	    (setq-local flycheck-checker 'javascript-eslint)))

(with-eval-after-load "js"
  (define-key js-mode-map (kbd "M-p") 'flycheck-previous-error)
  (define-key js-mode-map (kbd "M-n") 'flycheck-next-error))
#+END_SRC

** FlowType Support

Enable Flow checker for flycheck

#+BEGIN_SRC emacs-lisp
(package-install 'flycheck-flow)

(with-eval-after-load "flycheck"
  (require 'flycheck-flow)
  (flycheck-add-next-checker 'javascript-eslint 'javascript-flow))
#+END_SRC

** Typescript 

Testing TIDE

#+BEGIN_SRC emacs-lisp
(package-install 'tide)
#+END_SRC

Add prettier support:

#+BEGIN_SRC emacs-lisp
(package-install 'prettier-js)

(add-hook 'typescript-mode-hook 'prettier-js-mode)

;; Use prettier executable from node_modules
(package-install 'add-node-modules-path)

(add-hook 'prettier-js-mode-hook 'add-node-modules-path)
#+END_SRC

Add eslint checking:

#+BEGIN_SRC emacs-lisp
(package-install 'flycheck)

(add-hook 'typescript-mode-hook
	  (defun setup-typescript-flycheck ()
	    (flycheck-mode 1)
	    ;; Unless explicitly told flycheck can choose other
	    ;; checker which will mess up the chain setup below
	    (setq-local flycheck-checker 'javascript-eslint)))


;; Use eslint executable from node_modules
(package-install 'add-node-modules-path)

(add-hook 'typescript-mode-hook 'add-node-modules-path)

;; Set up flycheck keybindings
(with-eval-after-load "typescript-mode"
  (define-key typescript-mode-map (kbd "M-p") 'flycheck-previous-error)
  (define-key typescript-mode-map (kbd "M-n") 'flycheck-next-error))
#+END_SRC
